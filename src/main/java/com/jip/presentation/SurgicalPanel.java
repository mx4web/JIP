package com.jip.presentation;

import com.jip.data.SurgicalData;
import com.jip.formatters.regex.RegexFormatter;
import com.jip.model.SurgicalTableModel;
import com.jip.persistence.SurgicalDBManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.slf4j.LoggerFactory;

/**
 * @author Yu Xiao
 */
public class SurgicalPanel extends javax.swing.JPanel implements ActionListener {

    private final org.slf4j.Logger log = LoggerFactory.getLogger(this.getClass().getName());
    private SurgicalData currentSd;
    private SurgicalDBManager sdbm;
    private SurgicalTableModel stm;
    private int selectedRow = -1;
    
    String patientIDRegEx = "^[1-9]+$"; //digits only
    String numberRegEx = "(?<=^| )\\d+(\\.\\d+)?(?=$| )|(?<=^| )\\.\\d+(?=$| )";// allows 1, 1.1 and .1

    /**
     * Creates new form SurgicalPanel
     */
    public SurgicalPanel() {
        super();
        stm = new SurgicalTableModel();
        sdbm = new SurgicalDBManager(stm);
        currentSd = new SurgicalData();

        displayTable(0L);
        initComponents();
        initialTable();
    }

    private void initialTable() {
        // Select single, multiple, or multiple interval
        surgicalTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // Configure to listen for row selection
        ListSelectionModel rowSM = surgicalTable.getSelectionModel();
        rowSM.addListSelectionListener(new SurgicalPanel.RowListener());
    }
    
     private void displayTable(long pid) {
        try {
            sdbm.fillTableModel(pid);
        } catch (SQLException ex) {
            log.error("SQL Exception", ex.getMessage());
        }
    }

    /**
     * Clear the display and create a blank patient object
     */
    public void clearSurgical() {
        tfPID.setText("");
        tfDateSurgery.setText("");
        tfProcedure.setText("");
        tfRoomFee.setText("");
        tfSurgeonFee.setText("");
        tfSupplies.setText("");
    }

    private void saveSurgical() {
        try {
            int records = sdbm.saveSurgicalRecord(getSurgical());
            if (records == 0) {
                log.warn("There were no records saved.");
            }
            if (records > 1) {
                log.warn("More than one record was saved: " + records);
            }

        } catch (SQLException sqlex) {
            log.error("SQL Exception", sqlex.getMessage());
        }
    }

    /**
     * Fill the current inpatient object and return it
     *
     * @return the surgical object
     */
    public SurgicalData getSurgical() {

        currentSd.setPatientId(getPatientIDFromForm());
        try {
            currentSd.setDateOfSurgery((tfDateSurgery.getText()));
        } catch (ParseException ex) {
            Logger.getLogger(InpatientPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        currentSd.setProcedure(tfProcedure.getText());
        currentSd.setRoomFee(new BigDecimal(tfRoomFee.getText()));
        currentSd.setSurgeonFee(new BigDecimal(tfSurgeonFee.getText()));
        currentSd.setSupplies(new BigDecimal(tfSupplies.getText()));
               
        return currentSd;
    }
    
     /**
     * Get the patientID for the table
     *
     * @return
     */
    public long getPatientIDFromForm() {

        return Long.parseLong(tfPID.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        tfPID = new javax.swing.JFormattedTextField(new RegexFormatter(patientIDRegEx));
        tfDateSurgery = new javax.swing.JFormattedTextField(new SimpleDateFormat("yyyy-MM-dd"));
        tfProcedure = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        tfRoomFee = new javax.swing.JFormattedTextField(new RegexFormatter(numberRegEx));
        tfSurgeonFee = new javax.swing.JFormattedTextField(new RegexFormatter(numberRegEx));
        tfSupplies = new javax.swing.JFormattedTextField(new RegexFormatter(numberRegEx));
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        surgicalTable = new javax.swing.JTable();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(827, 644));

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(807, 150));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("PATIENT ID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("DATE OF SURGERY");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("SURGICAL PROCEDURE");

        tfPID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tfDateSurgery.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tfProcedure.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("OPERATING ROOM FEE");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("SURGEON'S FEE");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("SURGICAL SUPPLIES");

        tfRoomFee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tfSurgeonFee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tfSupplies.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel8.setText("(yyyy-mm-dd)");

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(46, 46, 46))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tfDateSurgery, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(tfPID, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfProcedure))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tfSurgeonFee, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfSupplies, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfRoomFee, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btnClear)
                .addGap(290, 290, 290))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClear, btnSave});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfDateSurgery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8))
                            .addComponent(jLabel2))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfProcedure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfRoomFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfSurgeonFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfSupplies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnClear))
                .addContainerGap())
        );

        surgicalTable.setModel(stm);
        jScrollPane1.setViewportView(surgicalTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate)
                .addGap(39, 39, 39)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(291, 291, 291))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(100, 100, 100))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAction
        JButton source = (JButton) (evt.getSource());
        switch (source.getActionCommand()) {
            case "Save":
                saveSurgical();
                displayTable(getPatientIDFromForm());
                break;
            case "Clear":
                clearSurgical();
                break;
            case "Delete":
                sdbm.deleteRow(selectedRow);                
                break;
            case "Update":
                sdbm.updateDB();
                break;
        }
    }//GEN-LAST:event_buttonAction

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btnClear;
    javax.swing.JButton btnDelete;
    javax.swing.JButton btnSave;
    javax.swing.JButton btnUpdate;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JTable surgicalTable;
    javax.swing.JFormattedTextField tfDateSurgery;
    javax.swing.JTextField tfPID;
    javax.swing.JTextField tfProcedure;
    javax.swing.JFormattedTextField tfRoomFee;
    javax.swing.JFormattedTextField tfSupplies;
    javax.swing.JFormattedTextField tfSurgeonFee;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
    }

    /**
     * Inner class that listens for row selection events
     */
    class RowListener implements ListSelectionListener {
        /*
         * (non-Javadoc)
         * 
         * @see
         * javax.swing.event.ListSelectionListener#valueChanged(javax.swing.
         * event.ListSelectionEvent)
         */

        @Override
        public void valueChanged(ListSelectionEvent e) {
            // Ignore extra messages.
            if (e.getValueIsAdjusting()) {
                return;
            }

            ListSelectionModel lsm = (ListSelectionModel) e.getSource();
            if (!lsm.isSelectionEmpty()) {
                selectedRow = lsm.getMinSelectionIndex();
            }
        }
    }
}
